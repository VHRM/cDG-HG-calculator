{"version":3,"sources":["componentes/CardCentral.js","App.js","serviceWorker.js","index.js"],"names":["CardCentral","useState","localStorage","getItem","wins","setWins","lose","setLose","rats","setRats","className","id","onClick","setItem","removeItem","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RA6CeA,MAzCf,WAAwB,IAAD,EACKC,mBAA0D,MAAhDC,aAAaC,QAAQ,uBAAkC,EAAKD,aAAaC,QAAQ,wBADhG,mBACZC,EADY,KACNC,EADM,OAEKJ,mBAA0D,MAAhDC,aAAaC,QAAQ,uBAAkC,EAAKD,aAAaC,QAAQ,wBAFhG,mBAEZG,EAFY,KAENC,EAFM,OAGKN,mBAA0D,MAAhDC,aAAaC,QAAQ,uBAAkC,EAAKD,aAAaC,QAAQ,wBAHhG,mBAGZK,EAHY,KAGNC,EAHM,KA0BnB,OACI,yBAAKC,UAAU,WACX,wBAAIA,UAAU,YAAd,8BACA,wBAAIA,UAAU,SAASN,EAAvB,MAAgCE,GAChC,wBAAII,UAAU,SAAd,iBAAqCF,GACrC,yBAAKE,UAAU,WACX,4BAAQC,GAAG,MAAMC,QA3B7B,WACIV,aAAaW,QAAQ,sBAAuBT,EAAO,GACnDC,EAAQD,EAAK,KAyBL,OACA,4BAAQO,GAAG,OAAOC,QAxB9B,WACIV,aAAaW,QAAQ,sBAAuBP,EAAO,GACnDC,EAAQD,EAAK,KAsBL,QACA,4BAAQK,GAAG,OAAOC,QArB9B,WACIV,aAAaW,QAAQ,sBAAuBL,EAAO,GACnDC,EAAQD,EAAK,KAmBL,SACA,4BAAQG,GAAG,QAAQC,QAlB/B,WACIV,aAAaY,WAAW,uBACxBZ,aAAaY,WAAW,uBACxBZ,aAAaY,WAAW,uBACxBT,EAAQ,GACRE,EAAQ,GACRE,EAAQ,KAYA,Y,MC3BDM,MARf,WACE,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,QCKcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.130c54b5.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './CardCentral.css'\r\n\r\n\r\nfunction CardCentral() {\r\n    const [wins, setWins] = useState((localStorage.getItem('CDg-calculator/wins')) == null ? 0 : (localStorage.getItem('CDg-calculator/wins')));\r\n    const [lose, setLose] = useState((localStorage.getItem('CDg-calculator/lose')) == null ? 0 : (localStorage.getItem('CDg-calculator/lose')));\r\n    const [rats, setRats] = useState((localStorage.getItem('CDg-calculator/rats')) == null ? 0 : (localStorage.getItem('CDg-calculator/rats')));\r\n\r\n    function addWin() {\r\n        localStorage.setItem('CDg-calculator/wins', wins + 1)\r\n        setWins(wins+1);\r\n    }\r\n    function addLose() {\r\n        localStorage.setItem('CDg-calculator/lose', lose + 1)\r\n        setLose(lose+1);\r\n    }\r\n    function addRat() {\r\n        localStorage.setItem('CDg-calculator/rats', rats + 1)\r\n        setRats(rats+1);\r\n    }\r\n    function reset(){\r\n        localStorage.removeItem('CDg-calculator/wins')\r\n        localStorage.removeItem('CDg-calculator/lose')\r\n        localStorage.removeItem('CDg-calculator/rats')\r\n        setWins(0);\r\n        setLose(0);\r\n        setRats(0);\r\n    }\r\n\r\n    return(\r\n        <div className=\"Dg-card\">\r\n            <h1 className=\"App-name\">Corrupted Dungeon WIN/LOSE</h1>\r\n            <h2 className=\"score\">{wins} x {lose}</h2>\r\n            <h2 className=\"ratao\">Fucking Rats: {rats}</h2>\r\n            <div className=\"buttons\">\r\n                <button id=\"win\" onClick={ addWin }>Win</button>\r\n                <button id=\"lose\" onClick={ addLose }>Lose</button>\r\n                <button id=\"rato\" onClick={ addRat }>RATAO</button>\r\n                <button id=\"reset\" onClick={ reset }>Reset</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardCentral;","import React from 'react';\nimport CardCentral from './componentes/CardCentral';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <CardCentral></CardCentral>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}